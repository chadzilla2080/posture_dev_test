services:
  db:
    image: mysql:8.0
    container_name: posture_prod_db
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - posture_network

  wordpress:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: posture_prod_wp
    restart: always
    depends_on:
      - db
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_NAME: ${DB_NAME}
      WORDPRESS_DB_USER: ${DB_USER}
      WORDPRESS_DB_PASSWORD: ${DB_PASSWORD}
      WORDPRESS_TABLE_PREFIX: ${WP_TABLE_PREFIX:-wp_}
    volumes:
      - wp_data:/var/www/html
      - ./wp-content:/var/www/html/wp-content
    networks:
      - posture_network

  nginx:
    image: nginx:latest
    container_name: posture_prod_nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - wp_data:/var/www/html
    depends_on:
      - wordpress
    networks:
      - posture_network

  backup:
    image: alpine
    volumes:
      - wp_data:/backup/wp
      - db_data:/backup/db
      - ./backups:/output
    command: |
      sh -c 'apk add --no-cache tar && 
      tar -czf /output/backup-$$(date +%Y%m%d).tar.gz /backup'
    depends_on:
      - wordpress
      - db

networks:
  posture_network:

volumes:
  db_data:
  wp_data:
